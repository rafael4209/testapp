{"ast":null,"code":"import { BehaviorSubject, map, switchMap, tap } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\n\nfunction FetchDataComponent_div_5_ng_container_1_ng_container_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"h4\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const question_r3 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Your Answer is: \", question_r3.answerValue, \"\");\n  }\n}\n\nfunction FetchDataComponent_div_5_ng_container_1_ng_container_8_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"input\", 5);\n    i0.ɵɵelementContainerEnd();\n  }\n}\n\nfunction FetchDataComponent_div_5_ng_container_1_ng_container_8_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"input\", 6);\n    i0.ɵɵelementContainerEnd();\n  }\n}\n\nfunction FetchDataComponent_div_5_ng_container_1_ng_container_8_ng_container_3_option_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r11 = ctx.$implicit;\n    i0.ɵɵpropertyInterpolate(\"value\", option_r11);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(option_r11);\n  }\n}\n\nfunction FetchDataComponent_div_5_ng_container_1_ng_container_8_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"select\", 7);\n    i0.ɵɵtemplate(2, FetchDataComponent_div_5_ng_container_1_ng_container_8_ng_container_3_option_2_Template, 2, 2, \"option\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r9.selectOptions);\n  }\n}\n\nfunction FetchDataComponent_div_5_ng_container_1_ng_container_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, FetchDataComponent_div_5_ng_container_1_ng_container_8_ng_container_1_Template, 2, 0, \"ng-container\", 2);\n    i0.ɵɵtemplate(2, FetchDataComponent_div_5_ng_container_1_ng_container_8_ng_container_2_Template, 2, 0, \"ng-container\", 2);\n    i0.ɵɵtemplate(3, FetchDataComponent_div_5_ng_container_1_ng_container_8_ng_container_3_Template, 3, 1, \"ng-container\", 2);\n    i0.ɵɵelementStart(4, \"input\", 4);\n    i0.ɵɵlistener(\"click\", function FetchDataComponent_div_5_ng_container_1_ng_container_8_Template_input_click_4_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const question_r3 = i0.ɵɵnextContext().$implicit;\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r12.onAnswer(question_r3));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const question_r3 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", question_r3.answerType === 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", question_r3.answerType === 1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", question_r3.answerType === 2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", question_r3.answerValue != null);\n  }\n}\n\nfunction FetchDataComponent_div_5_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"json\");\n    i0.ɵɵelementStart(3, \"h4\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"h4\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, FetchDataComponent_div_5_ng_container_1_ng_container_7_Template, 3, 1, \"ng-container\", 2);\n    i0.ɵɵtemplate(8, FetchDataComponent_div_5_ng_container_1_ng_container_8_Template, 5, 4, \"ng-container\", 2);\n    i0.ɵɵelement(9, \"br\")(10, \"br\")(11, \"br\");\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const question_r3 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(2, 5, question_r3), \" \");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"Q#: \", question_r3.questionId, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", question_r3.questionText, \"?\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", question_r3.answerValue);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", question_r3.answerValue == null);\n  }\n}\n\nfunction FetchDataComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, FetchDataComponent_div_5_ng_container_1_Template, 12, 7, \"ng-container\", 3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const data_r1 = ctx.ngIf;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", data_r1);\n  }\n}\n\nexport class FetchDataComponent {\n  constructor(http, baseUrl) {\n    this.http = http;\n    this.baseUrl = baseUrl;\n    this.questionsList = undefined;\n    this.selectOptions = ['Option 1', 'Option 2', 'Option 3'];\n    this.data$ = new BehaviorSubject([]);\n    http.get(baseUrl + 'weatherforecast').subscribe(result => {\n      this.data$.next(result.data);\n    }, error => console.error(error));\n  }\n\n  onAnswer(question) {\n    const newQuestion = Object.assign(Object.assign({}, question), {\n      answerValue: \"hello\"\n    });\n    this.http.post(this.baseUrl + 'weatherforecast', newQuestion).pipe(switchMap(() => this.data$), map(qarr => {\n      return qarr.map(e => e.questionId === newQuestion.questionId ? Object.assign(Object.assign({}, e), {\n        answerValue: \"hello\"\n      }) : e);\n    }), tap(moddedArr => {\n      this.data$.next(moddedArr);\n    })).subscribe();\n  }\n\n  onClear() {\n    this.http.delete(this.baseUrl + 'weatherforecast').pipe(switchMap(() => this.http.get(this.baseUrl + 'weatherforecast')), tap(() => {\n      alert('db cleared');\n    })).subscribe();\n  }\n\n}\n\nFetchDataComponent.ɵfac = function FetchDataComponent_Factory(t) {\n  return new (t || FetchDataComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject('BASE_URL'));\n};\n\nFetchDataComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FetchDataComponent,\n  selectors: [[\"app-fetch-data\"]],\n  decls: 7,\n  vars: 3,\n  consts: [[\"type\", \"button\", \"value\", \"Clear db\", 2, \"display\", \"block\", 3, \"click\"], [\"id\", \"tableLabel\"], [4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", \"value\", \"Answer\", 2, \"display\", \"block\", 3, \"disabled\", \"click\"], [\"type\", \"text\"], [\"type\", \"number\"], [\"name\", \"multiple\", \"id\", \"select\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"]],\n  template: function FetchDataComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"input\", 0);\n      i0.ɵɵlistener(\"click\", function FetchDataComponent_Template_input_click_0_listener() {\n        return ctx.onClear();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(1, \"h1\", 1);\n      i0.ɵɵtext(2, \"Questionnaire\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"p\");\n      i0.ɵɵtext(4, \"This component demonstrates fetching data from the server.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(5, FetchDataComponent_div_5_Template, 2, 1, \"div\", 2);\n      i0.ɵɵpipe(6, \"async\");\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(6, 1, ctx.data$));\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i2.AsyncPipe, i2.JsonPipe],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","map","switchMap","tap","i0","FetchDataComponent","constructor","http","baseUrl","undefined","get","subscribe","result","data$","next","data","error","console","onAnswer","question","newQuestion","answerValue","post","pipe","qarr","e","questionId","Object","moddedArr","onClear","delete","alert","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\99559\\source\\repos\\Project1\\Project1\\ClientApp\\src\\app\\fetch-data\\fetch-data.component.ts","C:\\Users\\99559\\source\\repos\\Project1\\Project1\\ClientApp\\src\\app\\fetch-data\\fetch-data.component.html"],"sourcesContent":["import { Component, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {IQuestion, IQuestionnaireResponse} from \"../models/questionnaire\";\r\nimport {BehaviorSubject, map, switchMap, tap} from \"rxjs\";\r\n\r\n@Component({\r\n  selector: 'app-fetch-data',\r\n  templateUrl: './fetch-data.component.html'\r\n})\r\nexport class FetchDataComponent {\r\n  public questionsList: IQuestionnaireResponse | undefined = undefined;\r\n\r\n  public selectOptions: string[] =  ['Option 1', 'Option 2', 'Option 3' ];\r\n  public data$: BehaviorSubject<IQuestion[]> = new BehaviorSubject<IQuestion[]>([])\r\n\r\n  constructor(private http: HttpClient, @Inject('BASE_URL') private baseUrl: string) {\r\n    http.get<IQuestionnaireResponse>(baseUrl + 'weatherforecast').subscribe(result => {\r\n      this.data$.next(result.data)\r\n    }, error => console.error(error));\r\n\r\n  }\r\n\r\n  public onAnswer(question: IQuestion): void {\r\n    const newQuestion: IQuestion = {...question, answerValue: \"hello\"};\r\n    this.http.post(this.baseUrl + 'weatherforecast',  newQuestion).pipe(\r\n      switchMap(() => this.data$),\r\n      map((qarr: IQuestion[]): IQuestion[] => {\r\n        return qarr.map(e => e.questionId === newQuestion.questionId ? {...e, answerValue: \"hello\"} : e)\r\n      }),\r\n      tap((moddedArr: IQuestion[]) =>  {\r\n        this.data$.next(moddedArr)\r\n      })\r\n    ).subscribe()\r\n  }\r\n\r\n  onClear() {\r\n    this.http.delete(this.baseUrl + 'weatherforecast' ).pipe(\r\n      switchMap(() =>  this.http.get<IQuestionnaireResponse>(this.baseUrl + 'weatherforecast')),\r\n      tap(() => {\r\n        alert('db cleared')\r\n      })\r\n    ).subscribe()\r\n\r\n  }\r\n}\r\n\r\ninterface WeatherForecast {\r\n  date: string;\r\n  temperatureC: number;\r\n  temperatureF: number;\r\n  summary: string;\r\n}\r\n","<input\r\n  (click)=\"onClear()\"\r\n  style=\"display: block\" type=\"button\" value=\"Clear db\">\r\n<h1 id=\"tableLabel\">Questionnaire</h1>\r\n\r\n<p>This component demonstrates fetching data from the server.</p>\r\n\r\n\r\n<div *ngIf=\"data$ | async as data\">\r\n  <ng-container *ngFor=\"let question of data\">\r\n    {{question | json}}\r\n    <h4>Q#: {{question.questionId}}</h4>\r\n\r\n    <h4>{{question.questionText}}?</h4>\r\n    <ng-container *ngIf=\"question.answerValue\">\r\n      <h4>Your Answer is: {{question.answerValue}}</h4>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"question.answerValue == null\">\r\n\r\n      <ng-container *ngIf=\"question.answerType === 0\">\r\n        <input type=\"text\">\r\n      </ng-container>\r\n\r\n      <ng-container *ngIf=\"question.answerType === 1\">\r\n        <input type=\"number\">\r\n      </ng-container>\r\n\r\n      <ng-container *ngIf=\"question.answerType === 2\">\r\n        <select name=\"multiple\" id=\"select\">\r\n          <option *ngFor=\"let option of selectOptions\" value=\"{{option}}\">{{option}}</option>\r\n        </select>\r\n      </ng-container>\r\n\r\n      <input\r\n        [disabled]=\"question.answerValue != null\"\r\n        (click)=\"onAnswer(question)\"\r\n        style=\"display: block\" type=\"button\" value=\"Answer\">\r\n\r\n    </ng-container>\r\n\r\n\r\n    <br>\r\n\r\n    <br>\r\n    <br>\r\n\r\n  </ng-container>\r\n</div>\r\n\r\n<!--<table class='table table-striped' aria-labelledby=\"tableLabel\" *ngIf=\"forecasts\">-->\r\n<!--  <thead>-->\r\n<!--    <tr>-->\r\n<!--      <th>Date</th>-->\r\n<!--      <th>Temp. (C)</th>-->\r\n<!--      <th>Temp. (F)</th>-->\r\n<!--      <th>Summary</th>-->\r\n<!--    </tr>-->\r\n<!--  </thead>-->\r\n<!--  <tbody>-->\r\n<!--    <tr *ngFor=\"let forecast of forecasts\">-->\r\n<!--      <td>{{ forecast.date }}</td>-->\r\n<!--      <td>{{ forecast.temperatureC }}</td>-->\r\n<!--      <td>{{ forecast.temperatureF }}</td>-->\r\n<!--      <td>{{ forecast.summary }}</td>-->\r\n<!--    </tr>-->\r\n<!--  </tbody>-->\r\n<!--</table>-->\r\n"]},"metadata":{},"sourceType":"module"}